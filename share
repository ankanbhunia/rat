#!/bin/bash

CURPATH="$(pwd)"
RATSPATH="$(dirname "$0")"
PORT=$(($RANDOM%1000+7000))

path=""
# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --path)
            shift
            path="$1"
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
    shift
done


compress_folder() {
    local folder_to_compress="$1"
    local output_file="$2"

    # Check if the output file already exists
    if [ -e "${output_file}.zip" ] || [ -e "${output_file}.tar" ] || [ -e "${output_file}.tar.xz" ]; then
        read -p "Output file already exists. Do you want to delete it and compress again? (y/n): " choice
        if [ "$choice" != "y" ]; then
            existing_file="${output_file}.zip"
            if [ -e "${output_file}.tar" ]; then
                existing_file="${output_file}.tar"
            elif [ -e "${output_file}.tar.xz" ]; then
                existing_file="${output_file}.tar.xz"
            fi
            echo "${existing_file}"
            return 0
        fi
    fi

    # Check if zip is available
    if command -v zip &> /dev/null; then
        zip -r "${output_file}.zip" "$folder_to_compress"
        echo "${output_file}.zip" 
        return 0
    fi

    # Check if tar is available
    if command -v tar &> /dev/null; then
        tar -cvf "${output_file}.tar" "$folder_to_compress"
        echo "${output_file}.tar"
        return 0
    fi

    # Check if xz is available
    if command -v xz &> /dev/null; then
        tar -c "$folder_to_compress" | xz -z -c - > "${output_file}.tar.xz"
        echo "${output_file}.tar.xz"
        return 0
    fi

    echo "Error: No supported compression tools (zip, tar, xz) found."
    exit 1
}


# Example usage:

cleanup() {
    echo "Cleaning up..."
    pkill -P $$
    wait
    echo "Cleanup complete."
}

# Trap the EXIT signal and call the cleanup function
trap cleanup EXIT

if [ ! -n "$path" ]; then
    echo "Usage: $0 --path <PATH>"
    exit 1
fi

if [ -d "$path" ]; then
    # If the path is a directory, create a .zip file
    dir=$(dirname "$path")
    foldername=$(basename "$path")
    cd $dir
    output_file="${foldername%/}"

    # Check if the output file already exists
    if [ -e "${output_file}.zip" ] || [ -e "${output_file}.tar" ] || [ -e "${output_file}.tar.xz" ]; then
        read -p "Output file already exists. Do you want to delete it and compress again? (y/n): " choice
        if [ "$choice" != "y" ]; then
            existing_file="${output_file}.zip"
            if [ -e "${output_file}.tar" ]; then
                existing_file="${output_file}.tar"
            elif [ -e "${output_file}.tar.xz" ]; then
                existing_file="${output_file}.tar.xz"
            fi
            zip_file="${existing_file}"
            return 0
        fi
    fi

    # Check if zip is available
    if command -v zip &> /dev/null; then
        zip -r "${output_file}.zip" "$foldername"
        zip_file="${output_file}.zip" 

    # Check if tar is available
    elif command -v tar &> /dev/null; then
        tar -cvf "${output_file}.tar" "$foldername"
        zip_file="${output_file}.tar"

    # Check if xz is available
    elif command -v xz &> /dev/null; then
        tar -c "$foldername" | xz -z -c - > "${output_file}.tar.xz"
        zip_file="${output_file}.tar.xz"
    else
        echo "Error: No supported compression tools (zip, tar, xz) found."
        exit 1
    fi

    # if [ -e "$zip_file" ]; then
    #     echo "The file $zip_file already exists."
        
    #     read -p "Do you want to replace it? (y/n): " answer

    #     if [ "$answer" == "y" ]; then
    #         rm "$zip_file"
    #         echo "Existing zip file deleted: $zip_file"
    #         if command -v zip &> /dev/null; then
    #             zip -r "$zip_file" "$foldername"
    #         else
    #             echo ERROR! ZIP is not available.
    #             exit 1
    #         fi
    #         echo "Created $zip_file"
    #     else
    #         echo "File not replaced. Continue with the current file."
    #     fi
    # else
    #     if command -v zip &> /dev/null; then
    #         zip -r "$zip_file" "$foldername"
    #     else
    #         echo ERROR! ZIP is not available.
    #         exit 1
    #     fi
    # fi

elif [ -f "$path" ]; then
    dir=$(dirname "$path")
    foldername=$(basename "$path")
    cd $dir
    zip_file="${foldername}"
fi

echo $zip_file
python3 -m http.server $PORT  >> /dev/null 2>&1 &   
cd $CURPATH
bash $RATSPATH/tunnel --port ${PORT} --subpage_path ${zip_file}
wait