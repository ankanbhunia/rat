#!/bin/bash

# Get the first argument as the subcommand
SUBCOMMAND=$1
shift # Remove the subcommand from the arguments list

# Check for background argument
BACKGROUND=false
ARGS=()
for arg in "$@"; do
    if [[ "$arg" == "-b" || "$arg" == "--background" ]]; then
        BACKGROUND=true
    else
        ARGS+=("$arg")
    fi
done
set -- "${ARGS[@]}" # Set remaining arguments

# Get the absolute path of the current script's directory
SCRIPT_ABS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# ANSI escape codes for colors and reset
BLUE_TEXT_COLOR="\033[34m" # Blue text
YELLOW_BG_COLOR="\033[43m\033[30m" # Yellow background, black text
RED_BG_COLOR="\033[41m\033[37m" # Red background, white text
GREEN_BG_COLOR="\033[42m\033[37m" # Green background, white text
CYAN_BG_COLOR="\033[46m\033[30m" # Cyan background, black text
MAGENTA_BG_COLOR="\033[45m\033[37m" # Magenta background, white text
BRIGHT_GREEN_TEXT_COLOR="\033[38;2;127;255;0m" # Bright Green text (#7FFF00)
RESET_COLOR="\033[0m" # Reset colors
LINE_LENGTH=$(tput cols) # Adjust as needed for desired box width

# Function to execute commands, optionally in background
execute_command() {
    if [ "$BACKGROUND" = true ]; then

        bash "$@" &

    else

        bash "$@" 


    fi
}

case "$SUBCOMMAND" in
    vscode)
        execute_command "$SCRIPT_ABS_DIR/bin/vscode.sh" "$@"
        ;;
    tunnel)
        execute_command "$SCRIPT_ABS_DIR/bin/tunnel.sh" "$@"
        ;;
    proxy)
        execute_command "$SCRIPT_ABS_DIR/bin/start_proxy.sh" "$@"
        ;;
    login)
        bash "$SCRIPT_ABS_DIR/bin/login_cloudflare.sh" "$@"
        ;;
    job)
        if [[ "$1" == "--usage" ]]; then
            bash "$SCRIPT_ABS_DIR/bin/gpu_status.sh" "$2"
        else
            bash "$SCRIPT_ABS_DIR/bin/job.sh" "$@" 
        fi
        ;;
    uninstall)
        bash "$SCRIPT_ABS_DIR/bin/uninstall.sh" "$SCRIPT_ABS_DIR" "$@"
        ;;
    upgrade)
        bash "$SCRIPT_ABS_DIR/bin/upgrade.sh" "$@"
        ;;
    clean)
        bash "$SCRIPT_ABS_DIR/bin/clean.sh" "$@"
        ;;
    sync)
        bash "$SCRIPT_ABS_DIR/bin/sync.sh" "$@"
        ;;
    terminal)
        execute_command "$SCRIPT_ABS_DIR/bin/terminal.sh" "$@"
        ;;
    container)
        bash "$SCRIPT_ABS_DIR/bin/container.sh" "$@"
        ;;
    debug)
        execute_command "$SCRIPT_ABS_DIR/bin/debug.sh" "$@"
        ;;
    *)
        echo -e "$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "Usage: rat-cli ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}vscode|tunnel|proxy|login|job|uninstall|upgrade|clean|terminal|container|debug -b|--background -- args ${BRIGHT_GREEN_TEXT_COLOR}<>${RESET_COLOR}${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  -b, --background: Run the command in the background.")"
        echo -e "$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "Compact Usage Summary:")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${RED_BG_COLOR}login${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${GREEN_BG_COLOR}vscode${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--port${RESET_COLOR} <PORT> ${BLUE_TEXT_COLOR}--jumpserver${RESET_COLOR} <user@host> ${BLUE_TEXT_COLOR}--domain${RESET_COLOR} <domain>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${YELLOW_BG_COLOR}tunnel${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--port${RESET_COLOR} <PORT> ${BLUE_TEXT_COLOR}--domain${RESET_COLOR} <DOMAIN> ${BLUE_TEXT_COLOR}--subpage_path${RESET_COLOR} <PATH> ${BLUE_TEXT_COLOR}--protocol${RESET_COLOR} <http/ssh>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--history${RESET_COLOR}${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${CYAN_BG_COLOR}proxy${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--jumpserver${RESET_COLOR} <user@host>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--clean${RESET_COLOR}${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${MAGENTA_BG_COLOR}job${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--node-ids${RESET_COLOR} <IDS> ${BLUE_TEXT_COLOR}--name${RESET_COLOR} <NAME> ${BLUE_TEXT_COLOR}--nodes${RESET_COLOR} <NUM> ${BLUE_TEXT_COLOR}--partition${RESET_COLOR} <NAME> ${BLUE_TEXT_COLOR}--time${RESET_COLOR} <TIME> ${BLUE_TEXT_COLOR}--gpu-nos${RESET_COLOR} <NUM> ${BLUE_TEXT_COLOR}--cpu-nos${RESET_COLOR} <NUM> ${BLUE_TEXT_COLOR}--domain${RESET_COLOR} <DOMAIN> ${BLUE_TEXT_COLOR}--jumpserver${RESET_COLOR} <SERVER>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--usage${RESET_COLOR}${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${RED_BG_COLOR}uninstall${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${YELLOW_BG_COLOR}upgrade${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${MAGENTA_BG_COLOR}clean${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${CYAN_BG_COLOR}terminal${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--port${RESET_COLOR} <PORT> ${BLUE_TEXT_COLOR}--jumpserver${RESET_COLOR} <user@host> ${BLUE_TEXT_COLOR}--domain${RESET_COLOR} <domain>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--renew-token${RESET_COLOR}${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--show-token${RESET_COLOR}${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${YELLOW_BG_COLOR}container${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--create${RESET_COLOR} <env_name>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--start${RESET_COLOR} <env_name>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--save${RESET_COLOR} <env_name>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--list${RESET_COLOR}${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--delete${RESET_COLOR} <env_name>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}|${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--copy${RESET_COLOR} <source_env_name> <new_env_name>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${CYAN_BG_COLOR}debug${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--jumpserver${RESET_COLOR} <user@host> ${BLUE_TEXT_COLOR}--port${RESET_COLOR} <PORT>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}<PYTHON_CMD>${RESET_COLOR}")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${GREEN_BG_COLOR}sync${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}<LOCAL_PATH>${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}<REMOTE_PATH>${RESET_COLOR} ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--jumpserver${RESET_COLOR} <user@host>] ${BRIGHT_GREEN_TEXT_COLOR}[${RESET_COLOR}${BLUE_TEXT_COLOR}--direction${RESET_COLOR} <upload/download>${BRIGHT_GREEN_TEXT_COLOR}]${RESET_COLOR}")"
        echo -e "$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${RESET_COLOR}"
        exit 1
        ;;
esac
