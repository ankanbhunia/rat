#!/bin/bash

# Get the first argument as the subcommand
SUBCOMMAND=$1
shift # Remove the subcommand from the arguments list

# Check for background argument
BACKGROUND=false
ARGS=()
for arg in "$@"; do
    if [[ "$arg" == "-b" || "$arg" == "--background" ]]; then
        BACKGROUND=true
    else
        ARGS+=("$arg")
    fi
done
set -- "${ARGS[@]}" # Set remaining arguments

# Get the absolute path of the current script's directory
SCRIPT_ABS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# ANSI escape codes for colors and reset
BLUE_BG_COLOR="\033[44m\033[37m" # Blue background, white text
YELLOW_BG_COLOR="\033[43m\033[30m" # Yellow background, black text
RED_BG_COLOR="\033[41m\033[37m" # Red background, white text
GREEN_BG_COLOR="\033[42m\033[37m" # Green background, white text
CYAN_BG_COLOR="\033[46m\033[30m" # Cyan background, black text
MAGENTA_BG_COLOR="\033[45m\033[37m" # Magenta background, white text
RESET_COLOR="\033[0m" # Reset colors
LINE_LENGTH=$(tput cols) # Adjust as needed for desired box width

# Function to execute commands, optionally in background
execute_command() {
    if [ "$BACKGROUND" = true ]; then
        LOG_DIR="$SCRIPT_ABS_DIR/.logs"
        mkdir -p "$LOG_DIR"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        TIMESTAMP_HUMAN=$(date +"%Y-%m-%d_%H-%M-%S")
        LOG_FILE="$LOG_DIR/log_${SUBCOMMAND}_${TIMESTAMP_HUMAN}.log"
        nohup "$@" > "$LOG_FILE" 2>&1 &
        PID=$! # Capture the PID of the last background command
        
        echo -e "${BLUE_BG_COLOR}$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${BLUE_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH )) "rat-cli command ${RED_BG_COLOR}${SUBCOMMAND}${YELLOW_BG_COLOR} running in background.")"
        echo -e "${BLUE_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH )) "Running Process - PID: $PID")"
        echo -e "${BLUE_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH)) "Output redirected to: $LOG_FILE")"
        echo -e "${BLUE_BG_COLOR}$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${BLUE_BG_COLOR}${GREEN_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH)) "Command: ${*}") ${YELLOW_BG_COLOR}"
        echo -e "${BLUE_BG_COLOR}$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${BLUE_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH)) "Use 'rat-cli clean' to manage or stop processes.")"
        echo -e "${BLUE_BG_COLOR}$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${RESET_COLOR}" # Reset color at the end
    else

        LOG_DIR="$SCRIPT_ABS_DIR/.logs"
        mkdir -p "$LOG_DIR"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        TIMESTAMP_HUMAN=$(date +"%Y-%m-%d_%H-%M-%S")
        LOG_FILE="$LOG_DIR/log_${SUBCOMMAND}_${TIMESTAMP_HUMAN}.log"
        
        echo -e "${BLUE_BG_COLOR}$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${BLUE_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH)) "rat-cli command ${RED_BG_COLOR}${SUBCOMMAND}${BLUE_BG_COLOR} started running.")"
        echo -e "${BLUE_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH )) "Output redirected to: $LOG_FILE")"
        echo -e "${BLUE_BG_COLOR}$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${BLUE_BG_COLOR}${GREEN_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH)) "Command: ${*}") ${BLUE_BG_COLOR}"
        echo -e "${BLUE_BG_COLOR}$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${BLUE_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH)) "Use 'rat-cli clean' to manage or stop processes.")"
        echo -e "${BLUE_BG_COLOR}$(printf '%-*s' $((LINE_LENGTH )) "Press Ctrl+C to exit.")"
        echo -e "${BLUE_BG_COLOR}$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${RESET_COLOR}" # Reset color at the end

        bash "$@" 2>&1 | tee "$LOG_FILE"


    fi
}

case "$SUBCOMMAND" in
    vscode)
        execute_command "$SCRIPT_ABS_DIR/bin/vscode.sh" "$@"
        ;;
    tunnel)
        execute_command "$SCRIPT_ABS_DIR/bin/tunnel.sh" "$@"
        ;;
    proxy)
        execute_command "$SCRIPT_ABS_DIR/bin/start_proxy.sh" "$@"
        ;;
    login)
        bash "$SCRIPT_ABS_DIR/bin/login_cloudflare.sh" "$@"
        ;;
    job)
        if [[ "$1" == "--usage" ]]; then
            bash "$SCRIPT_ABS_DIR/bin/gpu_status.sh" "$2"
        else
            bash "$SCRIPT_ABS_DIR/bin/job.sh" "$@" 
        fi
        ;;
    sync)
        bash "$SCRIPT_ABS_DIR/bin/sync.sh" "$@"
        ;;
    uninstall)
        bash "$SCRIPT_ABS_DIR/bin/uninstall.sh" "$SCRIPT_ABS_DIR" "$@"
        ;;
    upgrade)
        bash "$SCRIPT_ABS_DIR/bin/upgrade.sh" "$@"
        ;;
    install_vscode)
        bash "$SCRIPT_ABS_DIR/bin/install_vscode.sh" "$@"
        ;;
    clean)
        bash "$SCRIPT_ABS_DIR/bin/clean.sh" "$@"
        ;;
    zj)
        bash "$SCRIPT_ABS_DIR/bin/zellij.sh" "$@"
        ;;
    container)
        bash "$SCRIPT_ABS_DIR/bin/container.sh" "$@"
        ;;
    *)
        echo -e "$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "Usage: rat-cli [vscode|tunnel|proxy|login|job|sync|uninstall|upgrade|install_vscode|clean|zj|container] [-b|--background] [-- args <>]")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  -b, --background: Run the command in the background.")"
        echo -e "$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "Compact Usage Summary:")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${RED_BG_COLOR}login${RESET_COLOR}: Logs into your Cloudflare account and copies the necessary certificate.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${GREEN_BG_COLOR}vscode${RESET_COLOR} [--port <PORT>] [--jumpserver <user@host>] [--domain <domain>]: Starts a VSCode instance, optionally with a specific port, jumpserver, or domain.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${YELLOW_BG_COLOR}tunnel${RESET_COLOR} --port <PORT> [--domain <DOMAIN>] [--subpage_path <PATH>] [--protocol <http/ssh>]: Tunnels a local port to a public Cloudflare URL.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${CYAN_BG_COLOR}proxy${RESET_COLOR} --jumpserver <user@host>: Shares internet via a remote proxy server using a jumpserver.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${MAGENTA_BG_COLOR}job${RESET_COLOR} <node_ids> <gpu_nos> <cpu_nos> <domain_username> <node_name>: Submits a SLURM job with specified resources and domain.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${RED_BG_COLOR}sync${RESET_COLOR} <LOCAL_PATH> <REMOTE_PATH> [--jumpserver <user@host>] [--direction <upload/download>]: Synchronizes files/folders between local and remote.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${GREEN_BG_COLOR}uninstall${RESET_COLOR}: Removes rat-cli from PATH and deletes all associated files.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${YELLOW_BG_COLOR}upgrade${RESET_COLOR}: Upgrades rat-cli to the latest version from git.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${CYAN_BG_COLOR}install_vscode${RESET_COLOR} --version <VERSION> --arch <ARCHITECTURE>: Installs or updates the VSCode server to a specific version and architecture.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${MAGENTA_BG_COLOR}clean${RESET_COLOR}: Stops all running processes started by rat-cli (e.g., VSCode server, tunnels, proxies).")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${RED_BG_COLOR}zj${RESET_COLOR}: Starts a zellij session, downloading it if not found.")"
        echo -e "$(printf '%-*s' $((LINE_LENGTH)) "  rat-cli ${GREEN_BG_COLOR}container${RESET_COLOR} [--create <env_name> | --start <env_name> | --save <env_name> | --list | --delete <env_name>]: Manages Apptainer container environments.")"
        echo -e "$(printf '─%.0s' $(seq 1 $LINE_LENGTH))"
        echo -e "${RESET_COLOR}"
        exit 1
        ;;
esac
